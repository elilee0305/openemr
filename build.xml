<?xml version="1.0" encoding="UTF-8"?>
<project name="OpenEMR" description="OpenEMR build automation" default="build" basedir=".">

    <!-- Directories & tools -->
    <property name="build.dir" value="build"/>
    <property name="report.dir" value="${build.dir}/report"/>
    <property name="stage.dir" value="${build.dir}/staging"/>
    <property name="manifest.file" value="${build.dir}/BUILD-MANIFEST.json"/>
    <property name="artifact.sha256" value="${build.dir}/openemr-artifact.sha256"/>
    <property name="composer.cmd" value="composer"/>
    <property name="npm.cmd" value="npm"/>
    <property name="artifact.base" value="openemr-artifact"/>
    <property name="artifact.name" value="${artifact.base}.phar"/>
    <property name="php.cmd" value="php"/>

    <!-- Clean previous build -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete file="${artifact.name}"/>
        <echo msg="Previous build cleaned"/>
    </target>

    <!-- Initialize build directories -->
    <target name="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${report.dir}"/>
        <mkdir dir="${stage.dir}"/>
        <echo msg="Build directories created"/>
    </target>

    <!-- Install PHP dependencies -->
    <target name="install-php-deps" depends="init">
        <echo msg="Installing PHP dependencies"/>
        <exec executable="${composer.cmd}" output="${build.dir}/composer.log" error="${build.dir}/composer.err">
            <arg value="install"/>
            <arg value="--no-interaction"/>
            <arg value="--prefer-dist"/>
            <arg value="--no-ansi"/>
            <arg value="--no-progress"/>
            <arg value="--optimize-autoloader"/>
        </exec>
        <echo msg="PHP dependencies installation completed"/>
    </target>

    <!-- Install JS dependencies -->
    <target name="install-js-deps" depends="install-php-deps">
        <echo msg="Installing JS dependencies"/>
        <exec executable="${npm.cmd}" output="${build.dir}/npm-ci.log" error="${build.dir}/npm-ci.err">
            <arg value="ci"/>
        </exec>
        <exec executable="${npm.cmd}" output="${build.dir}/npm-build.log" error="${build.dir}/npm-build.err">
            <arg value="run"/>
            <arg value="build"/>
        </exec>
        <echo msg="JS dependencies installation completed"/>
    </target>

    <target name="verify-lockfiles" depends="init">
        <available file="composer.lock" property="has.composer.lock"/>
        <fail unless="has.composer.lock" message="composer.lock is missing. Run 'composer update' to generate it before building."/>

        <available file="package-lock.json" property="has.package.lock"/>
        <fail unless="has.package.lock" message="package-lock.json is missing. Run 'npm install' to generate it and commit before building."/>
    </target>

    <target name="build-manifest" depends="verify-lockfiles">
        <echo msg="Generating build manifest"/>
        <exec executable="${php.cmd}" output="${build.dir}/generate-manifest.log" error="${build.dir}/generate-manifest.err">
            <arg value="tools/generate-build-manifest.php"/>
            <arg value="${manifest.file}"/>
        </exec>
    </target>

    <target name="stage" depends="install-js-deps, build-manifest">
        <echo msg="Staging files for packaging"/>
        <delete dir="${stage.dir}"/>
        <mkdir dir="${stage.dir}"/>
        <copy todir="${stage.dir}">
            <fileset dir="${project.basedir}" excludes="vendor/**,node_modules/**,build/**"/>
        </copy>
        <!-- Include the manifest inside the artifact root -->
        <copy file="${manifest.file}" todir="${stage.dir}"/>
    </target>

    <!-- Package artifact -->
    <target name="package" depends="stage">
        <echo msg="Creating PHAR build artifact"/>
        <exec executable="${php.cmd}">
            <arg value="-d"/>
            <arg value="phar.readonly=0"/>
            <arg value="tools/create-phar.php"/>
            <arg value="${stage.dir}"/>
            <arg value="${artifact.name}"/>
        </exec>
        <echo msg="Artifact created: ${artifact.name}"/>
        <exec executable="${php.cmd}" output="${artifact.sha256}" logoutput="true">
            <arg value="-r"/>
            <arg value="echo hash_file('sha256', '${artifact.name}');"/>
        </exec>
    </target>

    <!-- Generate HTML build report -->
    <target name="build-report" depends="package">
        <echo msg="Generating HTML build report"/>
        <exec executable="${php.cmd}">
            <arg value="tools/generate-html-report.php"/>
            <arg value="${build.dir}"/>
            <arg value="${report.dir}"/>
            <arg value="${artifact.name}"/>
        </exec>
        <echo msg="HTML build report generated at ${report.dir}/build-report.html"/>
    </target>

    <target name="repackage-phar" depends="init">
        <echo msg="Repackaging PHAR from existing staged files"/>
        <available file="${manifest.file}" property="has.manifest"/>
        <fail unless="has.manifest" message="No staged files found at ${stage.dir}. Run the full build once to create staging (target: build or package)."/>
        <exec executable="${php.cmd}">
            <arg value="-d"/>
            <arg value="phar.readonly=0"/>
            <arg value="tools/create-phar.php"/>
            <arg value="${stage.dir}"/>
            <arg value="${artifact.name}"/>
        </exec>
        <exec executable="${php.cmd}" output="${artifact.sha256}" logoutput="true">
            <arg value="-r"/>
            <arg value="echo hash_file('sha256', '${artifact.name}');"/>
        </exec>
        <echo msg="Repackaged: ${artifact.name}"/>
    </target>

    <!-- Full build -->
    <target name="build" depends="build-report">
        <echo msg="Full build completed successfully. Open the report at ${report.dir}/build-report.html"/>
    </target>

    <!-- Clean + build in one command -->
    <target name="clean-build" depends="clean, build">
        <echo msg="Clean + Full build completed successfully"/>
    </target>

</project>
